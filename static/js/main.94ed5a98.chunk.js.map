{"version":3,"sources":["components/Header/_NavLink.js","components/Header/Header.js","components/Rezume/Rezume.js","components/Forms/_FormElement.js","components/Forms/Forms.js","components/Main/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["NavLink","Name","onClick","Active","className","Header","ChangePage","CurrentPage","Resume","Object","keys","map","NavItem","key","Rezume","About","Location","CurrentPosition","Summary","Contact","Email","Website","Phone","NameArray","split","href","target","rel","shift","join","FormElement","Label","Value","Type","onChange","type","placeholder","value","rows","length","Forms","SetSection","fe","e","Main","App","state","Experience","Education","Awards","Projects","Skills","Hobbies","setState","Section","Content","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94ed5a98.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavLink = ({ Name, onClick, Active }) => {\r\n  return (\r\n    <li className={\"nav-item\" + (Active ? \" active\" : \"\")}>\r\n      <button className=\"nav-link\" onClick={onClick}>\r\n        {Name}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NavLink;\r\n","import React from \"react\";\r\nimport NavLink from \"./_NavLink\";\r\n\r\nconst Header = ({ ChangePage, CurrentPage, Resume }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand navbar-dark justify-content-between rezume-header\">\r\n      <span className=\"navbar-brand mb-0 h1 col-1\">Rezume</span>\r\n      <ul className=\"navbar-nav\">\r\n        {Object.keys(Resume).map(NavItem => (\r\n          <NavLink\r\n            Name={NavItem}\r\n            Active={CurrentPage === NavItem}\r\n            onClick={() => ChangePage(NavItem)}\r\n            key={NavItem}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <button className=\"btn btn-primary btn-sm col-1\">About Us</button>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Rezume = ({ Resume }) => {\r\n  const { Name, Location, CurrentPosition, Summary } = Resume.About;\r\n  const { Email, Website, Phone } = Resume.Contact;\r\n  const NameArray = Name.split(\" \");\r\n  return (\r\n    <div className=\"rezume-rezume\">\r\n      <div className=\"rezume-rezume-contact\">\r\n        <p>\r\n          Email:{\" \"}\r\n          <strong>\r\n            <a href={\"mailto:\" + Email}>{Email}</a>\r\n          </strong>\r\n        </p>\r\n        <p>\r\n          Website:{\" \"}\r\n          <strong>\r\n            <a\r\n              href={\"http://\" + Website}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {Website}\r\n            </a>\r\n          </strong>\r\n        </p>\r\n        <p>\r\n          Phone: <strong>{Phone}</strong>\r\n        </p>\r\n      </div>\r\n      <h2>\r\n        <span>{NameArray.shift()}</span> {NameArray.join(\" \")}\r\n      </h2>\r\n      <p className=\"location\">{Location}</p>\r\n      <p className=\"summary\">\r\n        <strong className=\"position\">{CurrentPosition}</strong>\r\n        {Summary}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rezume;\r\n","import React from \"react\";\r\n\r\nconst FormElement = ({ Label, Value, Type, onChange }) => {\r\n  return (\r\n    <div className=\"rezume-forms-item\">\r\n      {(() => {\r\n        switch (Type) {\r\n          case \"Text\":\r\n            return (\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control rounded-0\"\r\n                placeholder={Label}\r\n                value={Value}\r\n                onChange={onChange}\r\n              />\r\n            );\r\n          case \"TextArea\":\r\n            return (\r\n              <textarea\r\n                className=\"form-control rounded-0\"\r\n                placeholder={Label}\r\n                onChange={onChange}\r\n                rows=\"10\"\r\n              >\r\n                {Value}\r\n              </textarea>\r\n            );\r\n          default:\r\n            return null;\r\n        }\r\n      })()}\r\n      {Value.length !== 0 && <span>{Label}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormElement;\r\n","import React from \"react\";\r\nimport FormElement from \"./_FormElement\";\r\n\r\nconst Forms = ({ CurrentPage, SetSection, Resume }) => {\r\n  return (\r\n    <div className=\"rezume-forms\">\r\n      {Resume[CurrentPage] &&\r\n        Object.keys(Resume[CurrentPage]).map((fe, key) => (\r\n          <FormElement\r\n            key={key}\r\n            Type={fe === \"Summary\" ? \"TextArea\" : \"Text\"}\r\n            Label={fe}\r\n            Value={Resume[CurrentPage][fe]}\r\n            onChange={e =>\r\n              SetSection(CurrentPage, {\r\n                ...Resume[CurrentPage],\r\n                [fe]: e.target.value\r\n              })\r\n            }\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forms;\r\n","import React from \"react\";\r\nimport Rezume from \"../Rezume/Rezume\";\r\nimport Forms from \"../Forms/Forms\";\r\n\r\nconst Main = ({ CurrentPage, Resume, SetSection }) => {\r\n  return (\r\n    <div className=\"container-fluid rezume-main\">\r\n      <div className=\"row\">\r\n        <div className=\"col-3\">\r\n          <Forms\r\n            CurrentPage={CurrentPage}\r\n            SetSection={SetSection}\r\n            Resume={Resume}\r\n          />\r\n        </div>\r\n        <div className=\"col-9\">\r\n          <Rezume Resume={Resume} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport Main from \"./Main/Main\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    CurrentPage: \"About\",\r\n    Resume: {\r\n      About: {\r\n        Name: \"Priyadharshini Rajaram\",\r\n        Location: \"London, United Kingdom\",\r\n        CurrentPosition: \"Product Owner at Cloudroit\",\r\n        Summary:\r\n          \"Strong proficiency in JavaScript, including DOM manipulation and the JavaScript object model and thorough understanding of React JS and its core principles. Experience with popular React.js workflows (such as Flux or Redux). Familiarity with newer specifications of EcmaScript.\"\r\n      },\r\n      Experience: [],\r\n      Education: [],\r\n      Awards: [],\r\n      Projects: [],\r\n      Skills: [],\r\n      Hobbies: [],\r\n      Contact: {\r\n        Email: \"priya@cloudroit.co.uk\",\r\n        Website: \"priya.ws\",\r\n        Phone: \"+44 7894561230\"\r\n      }\r\n    }\r\n  };\r\n  ChangePage = CurrentPage => {\r\n    this.setState({ CurrentPage });\r\n  };\r\n  SetSection = (Section, Content) => {\r\n    this.setState({ Resume: { ...this.state.Resume, [Section]: Content } });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"rezume\">\r\n        <Header\r\n          ChangePage={this.ChangePage}\r\n          Resume={this.state.Resume}\r\n          CurrentPage={this.state.CurrentPage}\r\n        />\r\n        <Main\r\n          CurrentPage={this.state.CurrentPage}\r\n          Resume={this.state.Resume}\r\n          SetSection={this.SetSection}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nimport \"./styles/App.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}